### Starting build.
# Target: eval.mli.depends, tags: { extension:mli, file:eval.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules eval.mli > eval.mli.depends # cached
# Target: minml.mli.depends, tags: { extension:mli, file:minml.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules minml.mli > minml.mli.depends # cached
# Target: type.mli.depends, tags: { extension:mli, file:type.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules type.mli > type.mli.depends # cached
# Target: type.cmi, tags: { byte, compile, extension:mli, file:type.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o type.cmi type.mli # cached
# Target: minml.cmi, tags: { byte, compile, extension:mli, file:minml.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o minml.cmi minml.mli # cached
# Target: eval.cmi, tags: { byte, compile, extension:mli, file:eval.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o eval.cmi eval.mli # cached
# Target: eval.ml.depends, tags: { extension:ml, file:eval.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules eval.ml > eval.ml.depends # cached
# Target: print.mli.depends, tags: { extension:mli, file:print.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules print.mli > print.mli.depends # cached
# Target: print.cmi, tags: { byte, compile, extension:mli, file:print.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o print.cmi print.mli # cached
# Target: input.mli.depends, tags: { extension:mli, file:input.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules input.mli > input.mli.depends # cached
# Target: input.cmi, tags: { byte, compile, extension:mli, file:input.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o input.cmi input.mli # cached
# Target: input.ml.depends, tags: { extension:ml, file:input.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules input.ml > input.ml.depends # cached
# Target: input.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:input.cmo, file:input.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o input.cmo input.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o lexer.cmo lexer.ml # cached
# Target: lib.ml.depends, tags: { extension:ml, file:lib.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules lib.ml > lib.ml.depends # cached
# Target: lib.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lib.cmo, file:lib.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o lib.cmo lib.ml # cached
# Target: loop.mli.depends, tags: { extension:mli, file:loop.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules loop.mli > loop.mli.depends # cached
# Target: loop.cmi, tags: { byte, compile, extension:mli, file:loop.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o loop.cmi loop.mli # cached
# Target: loop.ml.depends, tags: { extension:ml, file:loop.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules loop.ml > loop.ml.depends # cached
# Target: typecheck.mli.depends, tags: { extension:mli, file:typecheck.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules typecheck.mli > typecheck.mli.depends # cached
# Target: typecheck.cmi, tags: { byte, compile, extension:mli, file:typecheck.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o typecheck.cmi typecheck.mli # cached
# Target: loop.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:loop.cmo, file:loop.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o loop.cmo loop.ml # cached
# Target: minml.ml.depends, tags: { extension:ml, file:minml.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules minml.ml > minml.ml.depends # cached
# Target: minml.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:minml.cmo, file:minml.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o minml.cmo minml.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o parser.cmo parser.ml # cached
# Target: print.ml.depends, tags: { extension:ml, file:print.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules print.ml > print.ml.depends # cached
# Target: print.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:print.cmo, file:print.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o print.cmo print.ml # cached
# Target: top.mli.depends, tags: { extension:mli, file:top.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules top.mli > top.mli.depends # cached
# Target: top.cmi, tags: { byte, compile, extension:mli, file:top.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o top.cmi top.mli # cached
# Target: top.ml.depends, tags: { extension:ml, file:top.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules top.ml > top.ml.depends # cached
# Target: top.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:top.cmo, file:top.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o top.cmo top.ml # cached
# Target: type.ml.depends, tags: { extension:ml, file:type.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules type.ml > type.ml.depends # cached
# Target: type.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:type.cmo, file:type.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o type.cmo type.ml # cached
# Target: typecheck.ml.depends, tags: { extension:ml, file:typecheck.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules typecheck.ml > typecheck.ml.depends # cached
# Target: unify.mli.depends, tags: { extension:mli, file:unify.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules unify.mli > unify.mli.depends # cached
# Target: unify.cmi, tags: { byte, compile, extension:mli, file:unify.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o unify.cmi unify.mli # cached
# Target: unify.ml.depends, tags: { extension:ml, file:unify.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules unify.ml > unify.ml.depends # cached
# Target: eval.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:eval.cmo, file:eval.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o eval.cmo eval.ml
# Target: typecheck.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:typecheck.cmo, file:typecheck.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o typecheck.cmo typecheck.ml
# Target: unify.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:unify.cmo, file:unify.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o unify.cmo unify.ml
# Target: top.top, tags: { byte, extension:top, file:top.top, link, mktop, ocaml, quiet, toplevel }
/usr/bin/ocamlmktop lib.cmo type.cmo minml.cmo print.cmo eval.cmo input.cmo parser.cmo lexer.cmo unify.cmo typecheck.cmo loop.cmo top.cmo -o top.top
+ /usr/bin/ocamlmktop lib.cmo type.cmo minml.cmo print.cmo eval.cmo input.cmo parser.cmo lexer.cmo unify.cmo typecheck.cmo loop.cmo top.cmo -o top.top
File "parser.cmo", line 1:
Warning 31: files parser.cmo and /usr/lib/ocaml/compiler-libs/ocamlcommon.cma(Parser) both define a module named Parser
File "lexer.cmo", line 1:
Warning 31: files lexer.cmo and /usr/lib/ocaml/compiler-libs/ocamlcommon.cma(Lexer) both define a module named Lexer
# Compilation successful.
